09:04 bilby INFO    : Running for label 'sbatch_testing', output will be saved to '../data/nested_sampling/'
09:04 bilby INFO    : Analysis priors:
09:04 bilby INFO    : omega_gw=LogUniform(minimum=1e-09, maximum=1e-05, name='omega_gw', latex_label='omega_gw', unit=None, boundary=None)
09:04 bilby INFO    : h=LogUniform(minimum=0.0001, maximum=1.0, name='h', latex_label='h', unit=None, boundary=None)
09:04 bilby INFO    : phi0_gw=0.2
09:04 bilby INFO    : psi_gw=2.5
09:04 bilby INFO    : iota_gw=1.0
09:04 bilby INFO    : delta_gw=1.0
09:04 bilby INFO    : alpha_gw=1.0
09:04 bilby INFO    : f00=327.8470205611185
09:04 bilby INFO    : f01=205.53069910059
09:04 bilby INFO    : f02=303.0909794113198
09:04 bilby INFO    : f03=326.600561967271
09:04 bilby INFO    : f04=348.5592316999902
09:04 bilby INFO    : f05=112.94972319066429
09:04 bilby INFO    : f06=346.5319964932129
09:04 bilby INFO    : f07=215.6088104676294
09:04 bilby INFO    : f08=190.2678373613727
09:04 bilby INFO    : f09=193.7156834116254
09:04 bilby INFO    : f010=238.004053174088
09:04 bilby INFO    : f011=172.642909924795
09:04 bilby INFO    : f012=125.2002451675204
09:04 bilby INFO    : f013=277.9377069492822
09:04 bilby INFO    : f014=317.3789419337929
09:04 bilby INFO    : f015=316.12398422451724
09:04 bilby INFO    : f016=216.3733370950632
09:04 bilby INFO    : f017=218.811840394717
09:04 bilby INFO    : f018=170.93736991146392
09:04 bilby INFO    : f019=266.8691669720664
09:04 bilby INFO    : f020=245.4261196602377
09:04 bilby INFO    : f021=607.6775384652
09:04 bilby INFO    : f022=367.7671211299739
09:04 bilby INFO    : f023=244.391377738396
09:04 bilby INFO    : f024=186.4940783438289
09:04 bilby INFO    : f025=465.135238339217
09:04 bilby INFO    : f026=339.3156871298895
09:04 bilby INFO    : f027=200.658805294298
09:04 bilby INFO    : f028=216.171230573016
09:04 bilby INFO    : f029=130.78951613875947
09:04 bilby INFO    : f030=263.9807142255208
09:04 bilby INFO    : f031=641.928222127829
09:04 bilby INFO    : f032=192.8565208431179
09:04 bilby INFO    : f033=315.443563681749
09:04 bilby INFO    : f034=163.0479129097612
09:04 bilby INFO    : f035=191.4509120380344
09:04 bilby INFO    : f036=345.2781364654948
09:04 bilby INFO    : f037=168.0966779772235
09:04 bilby INFO    : f038=420.189443214863
09:04 bilby INFO    : f039=62.29588783082522
09:04 bilby INFO    : f040=320.5922923290326
09:04 bilby INFO    : f041=335.8162133708968
09:04 bilby INFO    : f042=279.5965821510426
09:04 bilby INFO    : f043=275.7078326240928
09:04 bilby INFO    : f044=192.5919636477142
09:04 bilby INFO    : f045=290.25460815391
09:04 bilby INFO    : f046=207.96816335831227
09:04 bilby INFO    : fdot0=-1.227834e-15
09:04 bilby INFO    : fdot1=-4.297e-16
09:04 bilby INFO    : fdot2=-6.4737e-16
09:04 bilby INFO    : fdot3=-1.022991e-15
09:04 bilby INFO    : fdot4=-4.1895e-16
09:04 bilby INFO    : fdot5=-6.2782e-17
09:04 bilby INFO    : fdot6=-1.46389e-15
09:04 bilby INFO    : fdot7=-1.6868e-16
09:04 bilby INFO    : fdot8=-6.2003e-16
09:04 bilby INFO    : fdot9=-6.96131e-16
09:04 bilby INFO    : fdot10=-3.9329e-16
09:04 bilby INFO    : fdot11=-3.474e-16
09:04 bilby INFO    : fdot12=-3.80975e-16
09:04 bilby INFO    : fdot13=-7.33846e-16
09:04 bilby INFO    : fdot14=-9.69443e-16
09:04 bilby INFO    : fdot15=-2.81542e-16
09:04 bilby INFO    : fdot16=-8.64392e-16
09:04 bilby INFO    : fdot17=-4.08387e-16
09:04 bilby INFO    : fdot18=-7.04774e-16
09:04 bilby INFO    : fdot19=-2.151992e-15
09:04 bilby INFO    : fdot20=-5.38155e-16
09:04 bilby INFO    : fdot21=-4.853e-15
09:04 bilby INFO    : fdot22=-1.11907e-15
09:04 bilby INFO    : fdot23=-5.2065e-16
09:04 bilby INFO    : fdot24=-6.20476e-16
09:04 bilby INFO    : fdot25=-4.0719e-15
09:04 bilby INFO    : fdot26=-1.614814e-15
09:04 bilby INFO    : fdot27=-3.89748e-16
09:04 bilby INFO    : fdot28=-7.90875e-16
09:04 bilby INFO    : fdot29=-4.39475e-16
09:04 bilby INFO    : fdot30=-6.65848e-16
09:04 bilby INFO    : fdot31=-4.330987e-14
09:04 bilby INFO    : fdot32=-6.44814e-16
09:04 bilby INFO    : fdot33=-3.148e-16
09:04 bilby INFO    : fdot34=-7.9062e-16
09:04 bilby INFO    : fdot35=-1.76854e-16
09:04 bilby INFO    : fdot36=-9.5291e-16
09:04 bilby INFO    : fdot37=-3.1496e-16
09:04 bilby INFO    : fdot38=-9.25931e-16
09:04 bilby INFO    : fdot39=-1.156186e-16
09:04 bilby INFO    : fdot40=-1.51379e-15
09:04 bilby INFO    : fdot41=-1.7183e-16
09:04 bilby INFO    : fdot42=-9.392e-16
09:04 bilby INFO    : fdot43=-1.52788e-15
09:04 bilby INFO    : fdot44=-5.1439e-16
09:04 bilby INFO    : fdot45=-2.0477e-16
09:04 bilby INFO    : fdot46=-4.178455630932531e-16
09:04 bilby INFO    : distance0=181816860005.41092
09:04 bilby INFO    : distance1=32362224272.807774
09:04 bilby INFO    : distance2=160300000000.0
09:04 bilby INFO    : distance3=95000000000.0
09:04 bilby INFO    : distance4=71428052144.98288
09:04 bilby INFO    : distance5=121950332930.45859
09:04 bilby INFO    : distance6=115000000000.0
09:04 bilby INFO    : distance7=372200000000.0
09:04 bilby INFO    : distance8=70000000000.0
09:04 bilby INFO    : distance9=122000000000.0
09:04 bilby INFO    : distance10=90300000000.0
09:04 bilby INFO    : distance11=126900000000.0
09:04 bilby INFO    : distance12=68400000000.0
09:04 bilby INFO    : distance13=188677873590.52078
09:04 bilby INFO    : distance14=70000000000.0
09:04 bilby INFO    : distance15=151514050004.5091
09:04 bilby INFO    : distance16=74000000000.0
09:04 bilby INFO    : distance17=131060646137.58327
09:04 bilby INFO    : distance18=147057754416.14117
09:04 bilby INFO    : distance19=166665455004.96002
09:04 bilby INFO    : distance20=39500000000.0
09:04 bilby INFO    : distance21=714900000000.0
09:04 bilby INFO    : distance22=208331818756.20007
09:04 bilby INFO    : distance23=208331818756.20007
09:04 bilby INFO    : distance24=120000000000.0
09:04 bilby INFO    : distance25=700000000000.0
09:04 bilby INFO    : distance26=114000000000.0
09:04 bilby INFO    : distance27=149600000000.0
09:04 bilby INFO    : distance28=136500000000.0
09:04 bilby INFO    : distance29=111110303336.64005
09:04 bilby INFO    : distance30=120100000000.0
09:04 bilby INFO    : distance31=350000000000.0
09:04 bilby INFO    : distance32=121800000000.0
09:04 bilby INFO    : distance33=694000000000.0
09:04 bilby INFO    : distance34=630400000000.0
09:04 bilby INFO    : distance35=243900665860.9172
09:04 bilby INFO    : distance36=139900000000.0
09:04 bilby INFO    : distance37=174000000000.0
09:04 bilby INFO    : distance38=138887879170.80002
09:04 bilby INFO    : distance39=71428052144.98288
09:04 bilby INFO    : distance40=60000000000.0
09:04 bilby INFO    : distance41=180000000000.0
09:04 bilby INFO    : distance42=97086672818.42332
09:04 bilby INFO    : distance43=158700000000.0
09:04 bilby INFO    : distance44=86300000000.0
09:04 bilby INFO    : distance45=166665455004.96002
09:04 bilby INFO    : distance46=101099999999.99998
09:04 bilby INFO    : gamma0=1e-13
09:04 bilby INFO    : gamma1=1e-13
09:04 bilby INFO    : gamma2=1e-13
09:04 bilby INFO    : gamma3=1e-13
09:04 bilby INFO    : gamma4=1e-13
09:04 bilby INFO    : gamma5=1e-13
09:04 bilby INFO    : gamma6=1e-13
09:04 bilby INFO    : gamma7=1e-13
09:04 bilby INFO    : gamma8=1e-13
09:04 bilby INFO    : gamma9=1e-13
09:04 bilby INFO    : gamma10=1e-13
09:04 bilby INFO    : gamma11=1e-13
09:04 bilby INFO    : gamma12=1e-13
09:04 bilby INFO    : gamma13=1e-13
09:04 bilby INFO    : gamma14=1e-13
09:04 bilby INFO    : gamma15=1e-13
09:04 bilby INFO    : gamma16=1e-13
09:04 bilby INFO    : gamma17=1e-13
09:04 bilby INFO    : gamma18=1e-13
09:04 bilby INFO    : gamma19=1e-13
09:04 bilby INFO    : gamma20=1e-13
09:04 bilby INFO    : gamma21=1e-13
09:04 bilby INFO    : gamma22=1e-13
09:04 bilby INFO    : gamma23=1e-13
09:04 bilby INFO    : gamma24=1e-13
09:04 bilby INFO    : gamma25=1e-13
09:04 bilby INFO    : gamma26=1e-13
09:04 bilby INFO    : gamma27=1e-13
09:04 bilby INFO    : gamma28=1e-13
09:04 bilby INFO    : gamma29=1e-13
09:04 bilby INFO    : gamma30=1e-13
09:04 bilby INFO    : gamma31=1e-13
09:04 bilby INFO    : gamma32=1e-13
09:04 bilby INFO    : gamma33=1e-13
09:04 bilby INFO    : gamma34=1e-13
09:04 bilby INFO    : gamma35=1e-13
09:04 bilby INFO    : gamma36=1e-13
09:04 bilby INFO    : gamma37=1e-13
09:04 bilby INFO    : gamma38=1e-13
09:04 bilby INFO    : gamma39=1e-13
09:04 bilby INFO    : gamma40=1e-13
09:04 bilby INFO    : gamma41=1e-13
09:04 bilby INFO    : gamma42=1e-13
09:04 bilby INFO    : gamma43=1e-13
09:04 bilby INFO    : gamma44=1e-13
09:04 bilby INFO    : gamma45=1e-13
09:04 bilby INFO    : gamma46=1e-13
09:04 bilby INFO    : sigma_p=0.001
09:04 bilby INFO    : sigma_m=1e-10
09:04 bilby INFO    : Analysis likelihood class: <class 'bilby_wrapper.BilbyLikelihood'>
09:04 bilby INFO    : Analysis likelihood noise evidence: nan
09:04 bilby INFO    : Single likelihood evaluation took 5.338e-03 s
09:04 bilby INFO    : Using sampler Dynesty with kwargs {'nlive': 100, 'bound': 'live', 'sample': 'auto', 'periodic': None, 'reflective': None, 'update_interval': 600, 'first_update': None, 'npdim': None, 'rstate': None, 'queue_size': 4, 'pool': None, 'use_pool': None, 'live_points': None, 'logl_args': None, 'logl_kwargs': None, 'ptform_args': None, 'ptform_kwargs': None, 'gradient': None, 'grad_args': None, 'grad_kwargs': None, 'compute_jac': False, 'enlarge': None, 'bootstrap': None, 'walks': 100, 'facc': 0.2, 'slices': None, 'fmove': 0.9, 'max_move': 100, 'update_func': None, 'ncdim': None, 'blob': False, 'save_history': False, 'history_filename': None, 'maxiter': None, 'maxcall': None, 'dlogz': 0.1, 'logl_max': inf, 'n_effective': None, 'add_live': True, 'print_progress': True, 'print_func': <bound method Dynesty._print_func of <bilby.core.sampler.dynesty.Dynesty object at 0x14fde192dd00>>, 'save_bounds': False, 'checkpoint_file': None, 'checkpoint_every': 60, 'resume': False}
09:04 bilby INFO    : Checkpoint every check_point_delta_t = 600s
09:04 bilby INFO    : Using dynesty version 2.1.0
09:04 bilby INFO    : Live-point based bound method requested with dynesty sample 'auto', overwriting to 'multi'
09:04 bilby INFO    : Setting up multiproccesing pool with 4 processes
Starting!
Ideal likelihood =  -34563.19960776678
RUN THE SAMPLER
09:04 bilby INFO    : Reading resume file ../data/nested_sampling//sbatch_testing_resume.pickle
09:04 bilby INFO    : Resume file successfully loaded.
1372it [00:00, ?it/s]1372it [00:00, ?it/s, bound:24 nc:  7 ncall:1.8e+04 eff:7.5% logz=-23190.50+/-0.42 dlogz:457.697>0.1]1373it [00:00,  4.22it/s, bound:24 nc: 30 ncall:1.8e+04 eff:7.5% logz=-23189.87+/-0.41 dlogz:455.838>0.1]1375it [00:01,  2.63it/s, bound:24 nc:112 ncall:1.9e+04 eff:7.4% logz=-23188.41+/-0.41 dlogz:454.451>0.1]1377it [00:02,  3.07it/s, bound:24 nc: 69 ncall:1.9e+04 eff:7.4% logz=-23186.24+/-0.42 dlogz:452.990>0.1]1378it [00:02,  3.16it/s, bound:24 nc: 41 ncall:1.9e+04 eff:7.4% logz=-23185.21+/-0.42 dlogz:451.532>0.1]1379it [00:02,  3.81it/s, bound:24 nc: 16 ncall:1.9e+04 eff:7.4% logz=-23184.45+/-0.41 dlogz:450.495>0.1]1381it [00:02,  5.75it/s, bound:24 nc:  2 ncall:1.9e+04 eff:7.4% logz=-23183.09+/-0.41 dlogz:448.957>0.1]1382it [00:02,  6.17it/s, bound:24 nc: 19 ncall:1.9e+04 eff:7.4% logz=-23181.98+/-0.42 dlogz:448.339>0.1]1383it [00:03,  5.47it/s, bound:24 nc: 31 ncall:1.9e+04 eff:7.4% logz=-23180.49+/-0.42 dlogz:447.223>0.1]1384it [00:03,  3.38it/s, bound:24 nc: 81 ncall:1.9e+04 eff:7.4% logz=-23179.55+/-0.42 dlogz:445.721>0.1]1385it [00:04,  2.42it/s, bound:24 nc: 94 ncall:1.9e+04 eff:7.3% logz=-23179.00+/-0.41 dlogz:444.776>0.1]1386it [00:04,  2.67it/s, bound:24 nc: 37 ncall:1.9e+04 eff:7.3% logz=-23176.22+/-0.43 dlogz:444.211>0.1]1388it [00:05,  3.83it/s, bound:24 nc: 27 ncall:1.9e+04 eff:7.3% logz=-23173.95+/-0.42 dlogz:440.134>0.1]1389it [00:05,  3.16it/s, bound:24 nc: 67 ncall:1.9e+04 eff:7.3% logz=-23173.25+/-0.42 dlogz:439.131>0.1]1390it [00:06,  1.70it/s, bound:25 nc:164 ncall:1.9e+04 eff:7.2% logz=-23172.51+/-0.41 dlogz:438.417>0.1]1391it [00:07,  1.89it/s, bound:25 nc: 46 ncall:1.9e+04 eff:7.2% logz=-23171.91+/-0.41 dlogz:437.676>0.1]1392it [00:08,  1.48it/s, bound:25 nc:142 ncall:1.9e+04 eff:7.2% logz=-23171.32+/-0.41 dlogz:437.064>0.1]1393it [00:09,  1.46it/s, bound:25 nc: 90 ncall:1.9e+04 eff:7.2% logz=-23170.75+/-0.41 dlogz:436.467>0.1]1395it [00:10,  1.29it/s, bound:25 nc:217 ncall:2.0e+04 eff:7.1% logz=-23169.48+/-0.41 dlogz:435.209>0.1]1396it [00:11,  1.37it/s, bound:26 nc: 65 ncall:2.0e+04 eff:7.1% logz=-23168.86+/-0.41 dlogz:434.591>0.1]1397it [00:11,  1.59it/s, bound:26 nc: 46 ncall:2.0e+04 eff:7.0% logz=-23168.33+/-0.41 dlogz:433.962>0.1]1398it [00:13,  1.17it/s, bound:26 nc:189 ncall:2.0e+04 eff:7.0% logz=-23167.32+/-0.42 dlogz:433.419>0.1]1399it [00:13,  1.54it/s, bound:26 nc: 17 ncall:2.0e+04 eff:7.0% logz=-23166.41+/-0.42 dlogz:467.814>0.1]1400it [00:13,  1.74it/s, bound:26 nc: 54 ncall:2.0e+04 eff:7.0% logz=-23165.79+/-0.41 dlogz:466.890>0.1]1401it [00:14,  1.79it/s, bound:26 nc: 66 ncall:2.0e+04 eff:7.0% logz=-23164.91+/-0.42 dlogz:466.260>0.1]1402it [00:14,  2.15it/s, bound:26 nc: 31 ncall:2.0e+04 eff:6.9% logz=-23164.19+/-0.42 dlogz:465.376>0.1]1403it [00:15,  1.68it/s, bound:26 nc:120 ncall:2.0e+04 eff:6.9% logz=-23163.70+/-0.41 dlogz:464.638>0.1]1404it [00:15,  1.74it/s, bound:26 nc: 70 ncall:2.0e+04 eff:6.9% logz=-23162.83+/-0.42 dlogz:464.139>0.1]1405it [00:16,  1.67it/s, bound:27 nc: 73 ncall:2.0e+04 eff:6.9% logz=-23161.83+/-0.42 dlogz:463.261>0.1]1406it [00:17,  1.80it/s, bound:27 nc: 58 ncall:2.0e+04 eff:6.9% logz=-23161.17+/-0.42 dlogz:462.252>0.1]1407it [00:18,  1.16it/s, bound:27 nc:210 ncall:2.1e+04 eff:6.8% logz=-23160.64+/-0.41 dlogz:461.588>0.1]1408it [00:18,  1.44it/s, bound:27 nc: 40 ncall:2.1e+04 eff:6.8% logz=-23160.08+/-0.41 dlogz:461.038>0.1]1410it [00:19,  1.84it/s, bound:27 nc: 86 ncall:2.1e+04 eff:6.8% logz=-23157.31+/-0.42 dlogz:458.721>0.1]1411it [00:19,  2.02it/s, bound:27 nc: 44 ncall:2.1e+04 eff:6.8% logz=-23156.75+/-0.42 dlogz:457.683>0.1]1412it [00:20,  1.97it/s, bound:27 nc: 72 ncall:2.1e+04 eff:6.7% logz=-23156.38+/-0.41 dlogz:457.118>0.1]1413it [00:20,  2.47it/s, bound:27 nc: 15 ncall:2.1e+04 eff:6.7% logz=-23155.82+/-0.41 dlogz:456.730>0.1]1414it [00:21,  2.06it/s, bound:28 nc: 79 ncall:2.1e+04 eff:6.7% logz=-23155.28+/-0.41 dlogz:456.161>0.1]1415it [00:21,  2.14it/s, bound:28 nc: 55 ncall:2.1e+04 eff:6.7% logz=-23154.77+/-0.41 dlogz:455.613>0.1]1416it [00:21,  2.64it/s, bound:28 nc: 20 ncall:2.1e+04 eff:6.7% logz=-23154.16+/-0.41 dlogz:455.093>0.1]1417it [00:22,  2.30it/s, bound:28 nc: 78 ncall:2.1e+04 eff:6.7% logz=-23153.64+/-0.41 dlogz:454.475>0.1]1418it [00:22,  2.22it/s, bound:28 nc: 64 ncall:2.1e+04 eff:6.7% logz=-23152.50+/-0.42 dlogz:453.947>0.1]1419it [00:23,  2.13it/s, bound:28 nc: 68 ncall:2.1e+04 eff:6.7% logz=-23151.23+/-0.42 dlogz:452.792>0.1]1420it [00:23,  2.59it/s, bound:28 nc: 23 ncall:2.1e+04 eff:6.6% logz=-23150.22+/-0.42 dlogz:451.519>0.1]1421it [00:24,  2.20it/s, bound:28 nc: 79 ncall:2.1e+04 eff:6.6% logz=-23149.16+/-0.42 dlogz:450.498>0.1]1422it [00:24,  2.68it/s, bound:28 nc: 24 ncall:2.1e+04 eff:6.6% logz=-23148.44+/-0.42 dlogz:449.425>0.1]1423it [00:24,  3.35it/s, bound:28 nc: 18 ncall:2.1e+04 eff:6.6% logz=-23147.72+/-0.42 dlogz:448.693>0.1]1424it [00:25,  2.15it/s, bound:28 nc:110 ncall:2.2e+04 eff:6.6% logz=-23146.87+/-0.42 dlogz:447.966>0.1]1425it [00:25,  2.30it/s, bound:29 nc: 36 ncall:2.2e+04 eff:6.6% logz=-23145.98+/-0.42 dlogz:447.104>0.1]1426it [00:26,  1.89it/s, bound:29 nc: 97 ncall:2.2e+04 eff:6.6% logz=-23145.34+/-0.42 dlogz:446.200>0.1]1427it [00:26,  2.21it/s, bound:29 nc: 36 ncall:2.2e+04 eff:6.6% logz=-23144.93+/-0.42 dlogz:445.555>0.1]1428it [00:27,  2.04it/s, bound:29 nc: 78 ncall:2.2e+04 eff:6.5% logz=-23144.30+/-0.42 dlogz:445.137>0.1]1429it [00:28,  1.41it/s, bound:29 nc:159 ncall:2.2e+04 eff:6.5% logz=-23143.60+/-0.42 dlogz:444.499>0.1]1430it [00:28,  1.84it/s, bound:29 nc: 20 ncall:2.2e+04 eff:6.5% logz=-23142.50+/-0.42 dlogz:443.786>0.1]1431it [00:29,  1.89it/s, bound:29 nc: 65 ncall:2.2e+04 eff:6.5% logz=-23141.75+/-0.42 dlogz:442.672>0.1]1432it [00:31,  1.16s/it, bound:29 nc:344 ncall:2.2e+04 eff:6.4% logz=-23141.17+/-0.42 dlogz:441.912>0.1]1433it [00:33,  1.28s/it, bound:30 nc:190 ncall:2.3e+04 eff:6.3% logz=-23140.42+/-0.42 dlogz:441.324>0.1]1434it [00:34,  1.14s/it, bound:30 nc:105 ncall:2.3e+04 eff:6.3% logz=-23139.84+/-0.42 dlogz:440.564>0.1]1435it [00:34,  1.11it/s, bound:30 nc: 42 ncall:2.3e+04 eff:6.3% logz=-23138.70+/-0.42 dlogz:439.973>0.1]1437it [00:35,  1.50it/s, bound:30 nc: 94 ncall:2.3e+04 eff:6.3% logz=-23137.39+/-0.42 dlogz:437.990>0.1]1438it [00:36,  1.37it/s, bound:30 nc:119 ncall:2.3e+04 eff:6.3% logz=-23137.01+/-0.42 dlogz:437.496>0.1]1439it [00:38,  1.16s/it, bound:30 nc:307 ncall:2.3e+04 eff:6.2% logz=-23136.63+/-0.41 dlogz:437.101>0.1]1440it [00:39,  1.18s/it, bound:31 nc:148 ncall:2.3e+04 eff:6.1% logz=-23136.30+/-0.41 dlogz:436.715>0.1]1441it [00:40,  1.03s/it, bound:31 nc: 88 ncall:2.4e+04 eff:6.1% logz=-23136.04+/-0.41 dlogz:436.376>0.1]1442it [00:40,  1.29it/s, bound:31 nc: 19 ncall:2.4e+04 eff:6.1% logz=-23135.73+/-0.41 dlogz:436.103>0.1]1443it [00:42,  1.19s/it, bound:31 nc:287 ncall:2.4e+04 eff:6.1% logz=-23135.36+/-0.41 dlogz:435.783>0.1]1444it [00:43,  1.08it/s, bound:31 nc: 40 ncall:2.4e+04 eff:6.0% logz=-23135.01+/-0.41 dlogz:435.407>0.1]1445it [00:43,  1.21it/s, bound:31 nc: 74 ncall:2.4e+04 eff:6.0% logz=-23134.45+/-0.41 dlogz:435.042>0.1]1446it [00:45,  1.05s/it, bound:32 nc:194 ncall:2.4e+04 eff:6.0% logz=-23133.85+/-0.42 dlogz:434.478>0.1]1447it [00:48,  1.79s/it, bound:32 nc:459 ncall:2.5e+04 eff:5.9% logz=-23133.35+/-0.42 dlogz:433.864>0.1]1448it [00:50,  1.60s/it, bound:33 nc:141 ncall:2.5e+04 eff:5.9% logz=-23132.87+/-0.42 dlogz:433.355>0.1]1449it [00:51,  1.49s/it, bound:33 nc:160 ncall:2.5e+04 eff:5.8% logz=-23132.42+/-0.41 dlogz:432.863>0.1]1450it [00:51,  1.16s/it, bound:33 nc: 47 ncall:2.5e+04 eff:5.8% logz=-23132.08+/-0.41 dlogz:432.406>0.1]1451it [00:53,  1.24s/it, bound:33 nc:186 ncall:2.5e+04 eff:5.8% logz=-23131.66+/-0.41 dlogz:432.052>0.1]1452it [00:56,  1.95s/it, bound:33 nc:472 ncall:2.6e+04 eff:5.7% logz=-23130.94+/-0.42 dlogz:431.629>0.1]1453it [01:01,  2.85s/it, bound:35 nc:616 ncall:2.6e+04 eff:5.5% logz=-23130.28+/-0.42 dlogz:430.898>0.1]1454it [01:02,  2.20s/it, bound:35 nc: 91 ncall:2.6e+04 eff:5.5% logz=-23129.75+/-0.42 dlogz:430.228>0.1]1456it [01:03,  1.44s/it, bound:35 nc:134 ncall:2.6e+04 eff:5.5% logz=-23128.82+/-0.42 dlogz:429.218>0.1]1457it [01:04,  1.37s/it, bound:35 nc:150 ncall:2.7e+04 eff:5.5% logz=-23128.27+/-0.42 dlogz:428.736>0.1]1458it [01:06,  1.43s/it, bound:35 nc:210 ncall:2.7e+04 eff:5.4% logz=-23127.74+/-0.42 dlogz:428.172>0.1]1459it [01:06,  1.21s/it, bound:36 nc: 66 ncall:2.7e+04 eff:5.4% logz=-23127.01+/-0.42 dlogz:427.638>0.1]1460it [01:09,  1.65s/it, bound:36 nc:365 ncall:2.7e+04 eff:5.4% logz=-23126.41+/-0.42 dlogz:426.897>0.1]1462it [01:10,  1.07s/it, bound:36 nc: 77 ncall:2.7e+04 eff:5.3% logz=-23124.53+/-0.43 dlogz:425.625>0.1]1463it [01:10,  1.11it/s, bound:36 nc: 47 ncall:2.7e+04 eff:5.3% logz=-23123.72+/-0.42 dlogz:424.388>0.1]1466it [01:11,  1.83it/s, bound:36 nc: 72 ncall:2.7e+04 eff:5.3% logz=-23122.15+/-0.42 dlogz:422.423>0.1]1467it [01:11,  1.86it/s, bound:37 nc: 51 ncall:2.8e+04 eff:5.3% logz=-23121.73+/-0.42 dlogz:421.969>0.1]1468it [01:12,  1.90it/s, bound:37 nc: 64 ncall:2.8e+04 eff:5.3% logz=-23120.86+/-0.42 dlogz:421.535>0.1]1469it [01:12,  2.17it/s, bound:37 nc: 31 ncall:2.8e+04 eff:5.3% logz=-23119.18+/-0.43 dlogz:420.660>0.1]1470it [01:13,  1.72it/s, bound:37 nc:119 ncall:2.8e+04 eff:5.3% logz=-23117.84+/-0.43 dlogz:418.965>0.1]1471it [01:14,  1.50it/s, bound:37 nc:116 ncall:2.8e+04 eff:5.3% logz=-23116.91+/-0.43 dlogz:417.617>0.1]1473it [01:14,  2.25it/s, bound:37 nc: 27 ncall:2.8e+04 eff:5.3% logz=-23115.72+/-0.42 dlogz:416.048>0.1]1474it [01:14,  2.67it/s, bound:37 nc: 22 ncall:2.8e+04 eff:5.3% logz=-23115.15+/-0.42 dlogz:415.467>0.1]1475it [01:15,  2.00it/s, bound:37 nc:109 ncall:2.8e+04 eff:5.3% logz=-23114.44+/-0.42 dlogz:414.889>0.1]1476it [01:17,  1.41it/s, bound:37 nc:168 ncall:2.8e+04 eff:5.2% logz=-23113.46+/-0.43 dlogz:414.169>0.1]1477it [01:17,  1.82it/s, bound:38 nc:  4 ncall:2.8e+04 eff:5.2% logz=-23112.47+/-0.43 dlogz:413.174>0.1]1478it [01:21,  1.52s/it, bound:38 nc:522 ncall:2.9e+04 eff:5.1% logz=-23111.56+/-0.43 dlogz:412.177>0.1]1479it [01:22,  1.53s/it, bound:38 nc:201 ncall:2.9e+04 eff:5.1% logz=-23110.88+/-0.42 dlogz:411.255>0.1]1480it [01:22,  1.13s/it, bound:39 nc:  5 ncall:2.9e+04 eff:5.1% logz=-23110.33+/-0.42 dlogz:410.567>0.1]1481it [01:24,  1.36s/it, bound:39 nc:252 ncall:2.9e+04 eff:5.1% logz=-23109.81+/-0.42 dlogz:410.010>0.1]1482it [01:24,  1.00it/s, bound:39 nc: 18 ncall:2.9e+04 eff:5.1% logz=-23109.36+/-0.42 dlogz:409.481>0.1]1483it [01:27,  1.43s/it, bound:39 nc:318 ncall:3.0e+04 eff:5.0% logz=-23108.94+/-0.42 dlogz:409.020>0.1]1484it [01:28,  1.45s/it, bound:39 nc:199 ncall:3.0e+04 eff:5.0% logz=-23108.57+/-0.42 dlogz:408.586>0.1]1485it [01:29,  1.18s/it, bound:40 nc: 55 ncall:3.0e+04 eff:5.0% logz=-23108.21+/-0.23 dlogz:408.210>0.1]1486it [01:30,  1.03s/it, bound:40 nc: 89 ncall:3.0e+04 eff:5.0% logz=-23107.92+/-0.29 dlogz:407.840>0.1]1487it [01:30,  1.29it/s, bound:40 nc: 23 ncall:3.0e+04 eff:5.0% logz=-23107.65+/-0.32 dlogz:407.539>0.1]1488it [01:31,  1.30it/s, bound:40 nc: 98 ncall:3.0e+04 eff:5.0% logz=-23107.42+/-0.34 dlogz:407.258>0.1]1489it [01:33,  1.21s/it, bound:40 nc:290 ncall:3.0e+04 eff:4.9% logz=-23107.19+/-0.36 dlogz:407.013>0.1]1490it [01:34,  1.28s/it, bound:40 nc:184 ncall:3.0e+04 eff:4.9% logz=-23106.98+/-0.37 dlogz:406.780>0.1]1491it [01:38,  2.18s/it, bound:41 nc:540 ncall:3.1e+04 eff:4.8% logz=-23106.73+/-0.38 dlogz:406.561>0.1]1492it [01:43,  2.74s/it, bound:41 nc:529 ncall:3.2e+04 eff:4.7% logz=-23106.34+/-0.39 dlogz:406.297>0.1]1493it [01:43,  2.13s/it, bound:42 nc: 77 ncall:3.2e+04 eff:4.7% logz=-23104.68+/-0.43 dlogz:405.902>0.1]1494it [01:46,  2.22s/it, bound:42 nc:318 ncall:3.2e+04 eff:4.7% logz=-23103.65+/-0.43 dlogz:404.223>0.1]1495it [01:48,  2.26s/it, bound:42 nc:308 ncall:3.2e+04 eff:4.6% logz=-23103.06+/-0.43 dlogz:403.189>0.1]1496it [01:49,  1.83s/it, bound:43 nc: 92 ncall:3.2e+04 eff:4.6% logz=-23102.62+/-0.42 dlogz:402.591>0.1]1497it [01:54,  2.76s/it, bound:44 nc:626 ncall:3.3e+04 eff:4.5% logz=-23102.22+/-0.42 dlogz:402.136>0.1]1498it [01:56,  2.52s/it, bound:44 nc:253 ncall:3.3e+04 eff:4.5% logz=-23101.35+/-0.43 dlogz:401.726>0.1]1499it [01:56,  1.86s/it, bound:44 nc: 45 ncall:3.3e+04 eff:4.5% logz=-23100.23+/-0.43 dlogz:400.848>0.1]1500it [01:58,  1.81s/it, bound:44 nc:219 ncall:3.3e+04 eff:4.5% logz=-23099.48+/-0.43 dlogz:399.716>0.1]1501it [01:59,  1.61s/it, bound:44 nc:150 ncall:3.4e+04 eff:4.5% logz=-23098.86+/-0.43 dlogz:398.954>0.1]1502it [02:00,  1.49s/it, bound:45 nc:146 ncall:3.4e+04 eff:4.5% logz=-23098.37+/-0.42 dlogz:398.328>0.1]1503it [02:01,  1.28s/it, bound:45 nc:102 ncall:3.4e+04 eff:4.4% logz=-23097.90+/-0.42 dlogz:397.831>0.1]1504it [02:02,  1.19s/it, bound:45 nc:125 ncall:3.4e+04 eff:4.4% logz=-23097.40+/-0.42 dlogz:397.352>0.1]1506it [02:03,  1.08it/s, bound:45 nc:150 ncall:3.4e+04 eff:4.4% logz=-23096.43+/-0.42 dlogz:396.333>0.1]1507it [02:04,  1.10it/s, bound:45 nc:109 ncall:3.4e+04 eff:4.4% logz=-23095.70+/-0.43 dlogz:395.844>0.1]1508it [02:04,  1.36it/s, bound:46 nc: 22 ncall:3.4e+04 eff:4.4% logz=-23095.10+/-0.42 dlogz:395.104>0.1]1509it [02:06,  1.02it/s, bound:46 nc:213 ncall:3.4e+04 eff:4.4% logz=-23094.67+/-0.42 dlogz:394.500>0.1]1510it [02:06,  1.35it/s, bound:46 nc: 15 ncall:3.4e+04 eff:4.4% logz=-23094.28+/-0.42 dlogz:394.056>0.1]1511it [02:07,  1.30it/s, bound:46 nc:107 ncall:3.5e+04 eff:4.4% logz=-23093.95+/-0.42 dlogz:393.656>0.1]1512it [02:12,  2.04s/it, bound:47 nc:661 ncall:3.5e+04 eff:4.3% logz=-23093.67+/-0.42 dlogz:393.320>0.1]1514it [02:15,  1.74s/it, bound:47 nc:345 ncall:3.6e+04 eff:4.3% logz=-23092.43+/-0.42 dlogz:392.397>0.1]1516it [02:17,  1.56s/it, bound:47 nc:332 ncall:3.6e+04 eff:4.2% logz=-23091.56+/-0.42 dlogz:391.288>0.1]1517it [02:18,  1.28s/it, bound:48 nc: 26 ncall:3.6e+04 eff:4.2% logz=-23091.23+/-0.42 dlogz:390.876>0.1]1518it [02:21,  1.87s/it, bound:48 nc:494 ncall:3.6e+04 eff:4.2% logz=-23090.97+/-0.42 dlogz:390.541>0.1]1519it [02:24,  2.02s/it, bound:48 nc:319 ncall:3.7e+04 eff:4.1% logz=-23090.47+/-0.42 dlogz:390.266>0.1]1520it [02:27,  2.32s/it, bound:49 nc:399 ncall:3.7e+04 eff:4.1% logz=-23089.83+/-0.42 dlogz:389.763>0.1]1521it [02:28,  1.96s/it, bound:49 nc:128 ncall:3.7e+04 eff:4.1% logz=-23089.23+/-0.43 dlogz:389.110>0.1]1522it [02:29,  1.64s/it, bound:49 nc:110 ncall:3.7e+04 eff:4.1% logz=-23088.78+/-0.42 dlogz:388.501>0.1]1523it [02:30,  1.58s/it, bound:50 nc:175 ncall:3.8e+04 eff:4.0% logz=-23088.30+/-0.42 dlogz:388.037>0.1]1524it [02:34,  2.19s/it, bound:50 nc:478 ncall:3.8e+04 eff:4.0% logz=-23087.74+/-0.42 dlogz:387.546>0.1]1525it [02:35,  1.79s/it, bound:51 nc: 92 ncall:3.8e+04 eff:4.0% logz=-23087.19+/-0.43 dlogz:386.978>0.1]1527it [02:37,  1.48s/it, bound:51 nc:279 ncall:3.8e+04 eff:4.0% logz=-23086.36+/-0.42 dlogz:385.976>0.1]1528it [02:38,  1.28s/it, bound:51 nc: 86 ncall:3.9e+04 eff:4.0% logz=-23085.80+/-0.42 dlogz:385.569>0.1]1529it [02:41,  1.96s/it, bound:51 nc:507 ncall:3.9e+04 eff:3.9% logz=-23084.96+/-0.43 dlogz:385.002>0.1]1530it [02:44,  2.03s/it, bound:52 nc:280 ncall:3.9e+04 eff:3.9% logz=-23084.04+/-0.43 dlogz:384.147>0.1]1531it [02:46,  1.99s/it, bound:52 nc:249 ncall:4.0e+04 eff:3.9% logz=-23083.31+/-0.43 dlogz:383.215>0.1]1532it [02:47,  1.86s/it, bound:52 nc:197 ncall:4.0e+04 eff:3.9% logz=-23082.74+/-0.43 dlogz:382.478>0.1]1533it [02:52,  2.61s/it, bound:53 nc:563 ncall:4.0e+04 eff:3.8% logz=-23082.29+/-0.43 dlogz:381.898>0.1]1534it [02:52,  2.03s/it, bound:53 nc: 84 ncall:4.0e+04 eff:3.8% logz=-23081.81+/-0.43 dlogz:381.435>0.1]1535it [02:54,  1.86s/it, bound:54 nc:175 ncall:4.1e+04 eff:3.8% logz=-23081.40+/-0.43 dlogz:380.952>0.1]1536it [02:55,  1.80s/it, bound:54 nc:217 ncall:4.1e+04 eff:3.8% logz=-23081.00+/-0.42 dlogz:380.531>0.1]1537it [02:56,  1.49s/it, bound:54 nc: 98 ncall:4.1e+04 eff:3.8% logz=-23080.56+/-0.42 dlogz:380.123>0.1]1538it [02:57,  1.19s/it, bound:54 nc: 64 ncall:4.1e+04 eff:3.8% logz=-23080.19+/-0.42 dlogz:379.674>0.1]1539it [03:02,  2.55s/it, bound:55 nc:731 ncall:4.2e+04 eff:3.7% logz=-23079.41+/-0.32 dlogz:379.293>0.1]1541it [03:03,  1.52s/it, bound:55 nc: 75 ncall:4.2e+04 eff:3.7% logz=-23077.87+/-0.41 dlogz:378.048>0.1]1542it [03:03,  1.21s/it, bound:55 nc: 35 ncall:4.2e+04 eff:3.7% logz=-23077.02+/-0.42 dlogz:376.936>0.1]1543it [03:03,  1.07it/s, bound:55 nc: 23 ncall:4.2e+04 eff:3.7% logz=-23076.41+/-0.43 dlogz:376.079>0.1]1544it [03:04,  1.23it/s, bound:55 nc: 61 ncall:4.2e+04 eff:3.7% logz=-23075.94+/-0.43 dlogz:375.455>0.1]1545it [03:06,  1.15s/it, bound:55 nc:261 ncall:4.2e+04 eff:3.7% logz=-23075.59+/-0.43 dlogz:374.977>0.1]1546it [03:09,  1.62s/it, bound:55 nc:366 ncall:4.3e+04 eff:3.6% logz=-23075.31+/-0.42 dlogz:374.618>0.1]1547it [03:09,  1.20s/it, bound:56 nc:  7 ncall:4.3e+04 eff:3.6% logz=-23075.07+/-0.42 dlogz:374.331>0.1]1548it [03:11,  1.57s/it, bound:56 nc:320 ncall:4.3e+04 eff:3.6% logz=-23074.81+/-0.42 dlogz:374.078>0.1]1549it [03:12,  1.21s/it, bound:56 nc: 44 ncall:4.3e+04 eff:3.6% logz=-23074.52+/-0.42 dlogz:373.807>0.1]1550it [03:14,  1.44s/it, bound:56 nc:261 ncall:4.3e+04 eff:3.6% logz=-23074.19+/-0.42 dlogz:373.513>0.1]1551it [03:22,  3.51s/it, bound:58 nc:1070 ncall:4.4e+04 eff:3.5% logz=-23073.80+/-0.42 dlogz:373.166>0.1]1552it [03:27,  3.97s/it, bound:59 nc:645 ncall:4.5e+04 eff:3.5% logz=-23073.06+/-0.43 dlogz:372.769>0.1] 1553it [03:28,  2.96s/it, bound:59 nc: 75 ncall:4.5e+04 eff:3.5% logz=-23072.41+/-0.43 dlogz:372.021>0.1]1554it [03:28,  2.17s/it, bound:59 nc: 40 ncall:4.5e+04 eff:3.5% logz=-23071.98+/-0.43 dlogz:371.358>0.1]1555it [03:30,  2.09s/it, bound:59 nc:249 ncall:4.5e+04 eff:3.4% logz=-23071.65+/-0.43 dlogz:370.920>0.1]1556it [03:31,  1.81s/it, bound:59 nc:150 ncall:4.5e+04 eff:3.4% logz=-23071.39+/-0.43 dlogz:370.584>0.1]1557it [03:33,  1.91s/it, bound:59 nc:283 ncall:4.6e+04 eff:3.4% logz=-23071.16+/-0.42 dlogz:370.311>0.1]1558it [03:33,  1.41s/it, bound:60 nc: 14 ncall:4.6e+04 eff:3.4% logz=-23070.94+/-0.42 dlogz:370.069>0.1]1559it [03:34,  1.16s/it, bound:60 nc: 78 ncall:4.6e+04 eff:3.4% logz=-23070.67+/-0.42 dlogz:369.843>0.1]1560it [03:35,  1.01s/it, bound:60 nc: 81 ncall:4.6e+04 eff:3.4% logz=-23070.37+/-0.42 dlogz:369.556>0.1]1562it [03:39,  1.44s/it, bound:60 nc:507 ncall:4.6e+04 eff:3.4% logz=-23069.85+/-0.42 dlogz:369.011>0.1]1563it [03:40,  1.48s/it, bound:61 nc:190 ncall:4.7e+04 eff:3.4% logz=-23069.43+/-0.42 dlogz:368.715>0.1]1564it [03:40,  1.16s/it, bound:61 nc: 33 ncall:4.7e+04 eff:3.4% logz=-23068.97+/-0.43 dlogz:368.277>0.1]1565it [03:42,  1.16s/it, bound:61 nc:154 ncall:4.7e+04 eff:3.3% logz=-23068.59+/-0.43 dlogz:367.808>0.1]1566it [03:43,  1.11s/it, bound:61 nc:129 ncall:4.7e+04 eff:3.3% logz=-23068.30+/-0.42 dlogz:367.424>0.1]1567it [03:44,  1.10s/it, bound:61 nc:139 ncall:4.7e+04 eff:3.3% logz=-23067.99+/-0.42 dlogz:367.121>0.1]1568it [03:52,  3.26s/it, bound:63 nc:1092 ncall:4.8e+04 eff:3.3% logz=-23067.63+/-0.42 dlogz:366.801>0.1]1569it [03:53,  2.50s/it, bound:63 nc: 90 ncall:4.8e+04 eff:3.3% logz=-23067.31+/-0.42 dlogz:366.433>0.1] 1570it [04:01,  4.30s/it, bound:64 nc:1116 ncall:4.9e+04 eff:3.2% logz=-23067.05+/-0.42 dlogz:366.098>0.1]1571it [04:02,  3.17s/it, bound:64 nc: 58 ncall:4.9e+04 eff:3.2% logz=-23066.83+/-0.42 dlogz:365.830>0.1] 1572it [04:02,  2.36s/it, bound:64 nc: 60 ncall:4.9e+04 eff:3.2% logz=-23066.61+/-0.42 dlogz:365.605>0.1]1573it [04:03,  1.95s/it, bound:65 nc:117 ncall:5.0e+04 eff:3.2% logz=-23066.33+/-0.42 dlogz:365.368>0.1]1574it [04:04,  1.69s/it, bound:65 nc:141 ncall:5.0e+04 eff:3.2% logz=-23066.05+/-0.42 dlogz:365.079>0.1]1575it [04:08,  2.27s/it, bound:65 nc:475 ncall:5.0e+04 eff:3.1% logz=-23065.76+/-0.42 dlogz:364.787>0.1]1576it [04:10,  2.25s/it, bound:66 nc:276 ncall:5.0e+04 eff:3.1% logz=-23065.42+/-0.42 dlogz:364.495>0.1]1577it [04:14,  2.82s/it, bound:66 nc:539 ncall:5.1e+04 eff:3.1% logz=-23065.02+/-0.43 dlogz:364.142>0.1]1578it [04:15,  2.08s/it, bound:67 nc: 33 ncall:5.1e+04 eff:3.1% logz=-23064.66+/-0.43 dlogz:363.736>0.1]1579it [04:15,  1.52s/it, bound:67 nc: 28 ncall:5.1e+04 eff:3.1% logz=-23064.37+/-0.43 dlogz:363.362>0.1]1580it [04:18,  1.97s/it, bound:67 nc:397 ncall:5.1e+04 eff:3.1% logz=-23064.14+/-0.42 dlogz:363.061>0.1]1581it [04:21,  2.38s/it, bound:67 nc:431 ncall:5.2e+04 eff:3.0% logz=-23063.85+/-0.42 dlogz:362.820>0.1]1582it [04:24,  2.42s/it, bound:68 nc:316 ncall:5.2e+04 eff:3.0% logz=-23063.47+/-0.43 dlogz:362.518>0.1]1583it [04:27,  2.69s/it, bound:68 nc:437 ncall:5.3e+04 eff:3.0% logz=-23063.12+/-0.43 dlogz:362.129>0.1]1584it [04:28,  2.28s/it, bound:69 nc:154 ncall:5.3e+04 eff:3.0% logz=-23062.65+/-0.27 dlogz:392.565>0.1]1585it [04:32,  2.77s/it, bound:69 nc:518 ncall:5.3e+04 eff:3.0% logz=-23062.32+/-0.32 dlogz:392.076>0.1]1586it [04:34,  2.36s/it, bound:70 nc:170 ncall:5.3e+04 eff:3.0% logz=-23061.87+/-0.36 dlogz:391.745>0.1]1587it [04:41,  3.74s/it, bound:71 nc:896 ncall:5.4e+04 eff:2.9% logz=-23061.24+/-0.40 dlogz:391.283>0.1]1588it [04:44,  3.70s/it, bound:71 nc:474 ncall:5.5e+04 eff:2.9% logz=-23060.57+/-0.42 dlogz:390.642>0.1]1589it [04:45,  2.72s/it, bound:72 nc: 44 ncall:5.5e+04 eff:2.9% logz=-23060.03+/-0.42 dlogz:389.956>0.1]1590it [04:46,  2.35s/it, bound:72 nc:195 ncall:5.5e+04 eff:2.9% logz=-23059.34+/-0.43 dlogz:389.408>0.1]1591it [04:52,  3.28s/it, bound:73 nc:706 ncall:5.6e+04 eff:2.9% logz=-23058.20+/-0.44 dlogz:388.708>0.1]1592it [04:54,  2.85s/it, bound:73 nc:238 ncall:5.6e+04 eff:2.8% logz=-23057.24+/-0.44 dlogz:387.565>0.1]1593it [04:54,  2.13s/it, bound:73 nc: 60 ncall:5.6e+04 eff:2.8% logz=-23056.60+/-0.44 dlogz:386.587>0.1]1594it [05:03,  4.10s/it, bound:74 nc:1134 ncall:5.7e+04 eff:2.8% logz=-23056.05+/-0.44 dlogz:385.944>0.1]1595it [05:15,  6.65s/it, bound:76 nc:1623 ncall:5.9e+04 eff:2.7% logz=-23055.40+/-0.44 dlogz:385.381>0.1]1596it [05:20,  6.16s/it, bound:77 nc:642 ncall:5.9e+04 eff:2.7% logz=-23054.84+/-0.43 dlogz:384.725>0.1] 1597it [05:24,  5.30s/it, bound:77 nc:434 ncall:6.0e+04 eff:2.7% logz=-23054.27+/-0.43 dlogz:384.156>0.1]1598it [05:26,  4.33s/it, bound:77 nc:268 ncall:6.0e+04 eff:2.7% logz=-23053.76+/-0.43 dlogz:383.568>0.1]1599it [05:26,  3.26s/it, bound:78 nc: 87 ncall:6.0e+04 eff:2.7% logz=-23053.25+/-0.43 dlogz:383.050>0.1]1600it [05:27,  2.46s/it, bound:78 nc: 82 ncall:6.0e+04 eff:2.7% logz=-23052.76+/-0.43 dlogz:382.530>0.1]1601it [05:29,  2.29s/it, bound:78 nc:248 ncall:6.1e+04 eff:2.6% logz=-23052.19+/-0.43 dlogz:382.032>0.1]1603it [05:30,  1.39s/it, bound:78 nc: 78 ncall:6.1e+04 eff:2.6% logz=-23050.14+/-0.44 dlogz:380.302>0.1]1604it [05:34,  2.09s/it, bound:78 nc:549 ncall:6.1e+04 eff:2.6% logz=-23049.53+/-0.44 dlogz:379.378>0.1]1605it [05:35,  1.75s/it, bound:79 nc: 94 ncall:6.1e+04 eff:2.6% logz=-23048.87+/-0.44 dlogz:378.763>0.1]1606it [05:39,  2.34s/it, bound:79 nc:512 ncall:6.2e+04 eff:2.6% logz=-23048.33+/-0.44 dlogz:378.095>0.1]1607it [05:42,  2.78s/it, bound:80 nc:505 ncall:6.2e+04 eff:2.6% logz=-23047.87+/-0.44 dlogz:377.546>0.1]1608it [05:43,  2.22s/it, bound:80 nc:106 ncall:6.2e+04 eff:2.6% logz=-23047.12+/-0.44 dlogz:377.071>0.1]1609it [05:47,  2.51s/it, bound:81 nc:412 ncall:6.3e+04 eff:2.6% logz=-23046.26+/-0.44 dlogz:376.310>0.1]1610it [05:56,  4.44s/it, bound:82 nc:1184 ncall:6.4e+04 eff:2.5% logz=-23045.48+/-0.44 dlogz:375.447>0.1]1611it [05:58,  3.91s/it, bound:82 nc:348 ncall:6.4e+04 eff:2.5% logz=-23044.71+/-0.32 dlogz:374.649>0.1] 1612it [06:07,  5.27s/it, bound:84 nc:1097 ncall:6.5e+04 eff:2.5% logz=-23044.16+/-0.37 dlogz:373.876>0.1]1613it [06:07,  3.74s/it, bound:84 nc: 14 ncall:6.6e+04 eff:2.5% logz=-23043.72+/-0.40 dlogz:373.312>0.1] 1614it [06:08,  2.81s/it, bound:84 nc: 83 ncall:6.6e+04 eff:2.5% logz=-23043.35+/-0.41 dlogz:372.862>0.1]1615it [06:12,  3.43s/it, bound:85 nc:625 ncall:6.6e+04 eff:2.4% logz=-23042.69+/-0.42 dlogz:372.485>0.1]1616it [06:17,  3.66s/it, bound:85 nc:558 ncall:6.7e+04 eff:2.4% logz=-23041.49+/-0.44 dlogz:371.812>0.1]1617it [06:18,  2.86s/it, bound:85 nc:128 ncall:6.7e+04 eff:2.4% logz=-23040.66+/-0.44 dlogz:370.604>0.1]1618it [06:19,  2.41s/it, bound:86 nc:168 ncall:6.7e+04 eff:2.4% logz=-23040.17+/-0.44 dlogz:369.766>0.1]1619it [06:19,  1.79s/it, bound:86 nc: 42 ncall:6.7e+04 eff:2.4% logz=-23039.81+/-0.44 dlogz:369.266>0.1]1620it [06:21,  1.70s/it, bound:86 nc:199 ncall:6.7e+04 eff:2.4% logz=-23038.83+/-0.44 dlogz:368.896>0.1]1621it [06:22,  1.58s/it, bound:86 nc:172 ncall:6.7e+04 eff:2.4% logz=-23038.02+/-0.44 dlogz:367.905>0.1]1622it [06:23,  1.33s/it, bound:86 nc: 96 ncall:6.8e+04 eff:2.4% logz=-23037.48+/-0.44 dlogz:367.079>0.1]1623it [06:23,  1.02it/s, bound:87 nc: 12 ncall:6.8e+04 eff:2.4% logz=-23036.58+/-0.44 dlogz:366.532>0.1]1624it [06:24,  1.03s/it, bound:87 nc:149 ncall:6.8e+04 eff:2.4% logz=-23034.94+/-0.45 dlogz:365.623>0.1]1625it [06:27,  1.56s/it, bound:87 nc:371 ncall:6.8e+04 eff:2.4% logz=-23033.46+/-0.45 dlogz:363.972>0.1]1626it [06:43,  5.83s/it, bound:90 nc:2046 ncall:7.0e+04 eff:2.3% logz=-23032.13+/-0.45 dlogz:362.480>0.1]1627it [06:45,  4.83s/it, bound:90 nc:330 ncall:7.0e+04 eff:2.3% logz=-23031.33+/-0.44 dlogz:361.144>0.1] 1628it [06:46,  3.48s/it, bound:90 nc: 42 ncall:7.1e+04 eff:2.3% logz=-23030.72+/-0.44 dlogz:360.330>0.1]1629it [06:47,  2.92s/it, bound:91 nc:202 ncall:7.1e+04 eff:2.3% logz=-23030.25+/-0.44 dlogz:372.399>0.1]1630it [06:50,  2.75s/it, bound:91 nc:306 ncall:7.1e+04 eff:2.3% logz=-23029.64+/-0.44 dlogz:371.916>0.1]1631it [06:50,  1.96s/it, bound:91 nc: 15 ncall:7.1e+04 eff:2.3% logz=-23028.97+/-0.44 dlogz:371.300>0.1]1632it [06:51,  1.88s/it, bound:91 nc:225 ncall:7.1e+04 eff:2.3% logz=-23027.76+/-0.45 dlogz:370.614>0.1]1633it [06:53,  1.83s/it, bound:92 nc:217 ncall:7.1e+04 eff:2.3% logz=-23026.31+/-0.45 dlogz:369.396>0.1]1634it [06:56,  2.18s/it, bound:92 nc:394 ncall:7.2e+04 eff:2.3% logz=-23025.27+/-0.45 dlogz:367.938>0.1]1635it [06:56,  1.62s/it, bound:93 nc: 29 ncall:7.2e+04 eff:2.3% logz=-23022.47+/-0.46 dlogz:366.891>0.1]1636it [06:57,  1.37s/it, bound:93 nc:109 ncall:7.2e+04 eff:2.3% logz=-23020.46+/-0.45 dlogz:364.079>0.1]1637it [07:05,  3.42s/it, bound:94 nc:1067 ncall:7.3e+04 eff:2.2% logz=-23016.86+/-0.46 dlogz:362.056>0.1]1638it [07:08,  3.25s/it, bound:94 nc:376 ncall:7.3e+04 eff:2.2% logz=-23015.74+/-0.45 dlogz:358.451>0.1] 1639it [07:09,  2.38s/it, bound:95 nc: 34 ncall:7.4e+04 eff:2.2% logz=-23014.88+/-0.45 dlogz:367.130>0.1]1640it [07:10,  2.19s/it, bound:95 nc:229 ncall:7.4e+04 eff:2.2% logz=-23014.11+/-0.44 dlogz:366.251>0.1]1641it [07:18,  3.88s/it, bound:96 nc:1014 ncall:7.5e+04 eff:2.2% logz=-23012.35+/-0.45 dlogz:365.481>0.1]1642it [07:20,  3.27s/it, bound:96 nc:242 ncall:7.5e+04 eff:2.2% logz=-23011.26+/-0.45 dlogz:363.708>0.1] 1643it [07:25,  3.91s/it, bound:98 nc:690 ncall:7.6e+04 eff:2.2% logz=-23010.37+/-0.45 dlogz:362.601>0.1]1644it [07:33,  5.16s/it, bound:99 nc:1051 ncall:7.7e+04 eff:2.1% logz=-23008.77+/-0.40 dlogz:361.707>0.1]1645it [07:35,  4.14s/it, bound:99 nc:233 ncall:7.7e+04 eff:2.1% logz=-23008.11+/-0.42 dlogz:360.093>0.1] 1646it [07:36,  3.12s/it, bound:100 nc: 88 ncall:7.7e+04 eff:2.1% logz=-23007.00+/-0.44 dlogz:359.422>0.1]1647it [07:44,  4.49s/it, bound:101 nc:992 ncall:7.8e+04 eff:2.1% logz=-23005.95+/-0.44 dlogz:358.306>0.1]1648it [07:49,  4.72s/it, bound:102 nc:678 ncall:7.9e+04 eff:2.1% logz=-23005.29+/-0.44 dlogz:357.242>0.1]1649it [08:03,  7.50s/it, bound:105 nc:1812 ncall:8.1e+04 eff:2.0% logz=-23004.42+/-0.45 dlogz:356.572>0.1]1650it [08:05,  5.79s/it, bound:105 nc:239 ncall:8.1e+04 eff:2.0% logz=-23003.69+/-0.44 dlogz:355.692>0.1] 1651it [08:13,  6.58s/it, bound:106 nc:1099 ncall:8.2e+04 eff:2.0% logz=-23001.29+/-0.46 dlogz:354.955>0.1]1652it [08:15,  5.22s/it, bound:106 nc:265 ncall:8.2e+04 eff:2.0% logz=-22999.19+/-0.46 dlogz:352.542>0.1] 1653it [08:25,  6.75s/it, bound:109 nc:1313 ncall:8.3e+04 eff:2.0% logz=-22997.04+/-0.46 dlogz:350.438>0.1]1654it [08:26,  4.83s/it, bound:109 nc: 49 ncall:8.3e+04 eff:2.0% logz=-22995.66+/-0.45 dlogz:348.279>0.1] 1655it [08:28,  4.07s/it, bound:109 nc:299 ncall:8.4e+04 eff:2.0% logz=-22993.97+/-0.45 dlogz:346.886>0.1]1656it [08:36,  5.30s/it, bound:110 nc:1056 ncall:8.5e+04 eff:2.0% logz=-22988.48+/-0.46 dlogz:345.187>0.1]1657it [08:43,  5.60s/it, bound:111 nc:815 ncall:8.6e+04 eff:1.9% logz=-22986.64+/-0.46 dlogz:339.684>0.1] 1658it [08:44,  4.33s/it, bound:111 nc:178 ncall:8.6e+04 eff:1.9% logz=-22985.76+/-0.45 dlogz:337.835>0.1]1659it [08:45,  3.24s/it, bound:111 nc: 91 ncall:8.6e+04 eff:1.9% logz=-22984.25+/-0.45 dlogz:336.950>0.1]1660it [08:48,  3.27s/it, bound:111 nc:441 ncall:8.6e+04 eff:1.9% logz=-22980.26+/-0.46 dlogz:335.426>0.1]1661it [08:53,  3.77s/it, bound:113 nc:625 ncall:8.7e+04 eff:1.9% logz=-22978.94+/-0.45 dlogz:331.428>0.1]09:13 bilby INFO    : Written checkpoint file ../data/nested_sampling//sbatch_testing_resume.pickle
1662it [08:54,  3.04s/it, bound:113 nc: 75 ncall:8.7e+04 eff:1.9% logz=-22977.40+/-0.40 dlogz:330.100>0.1]1663it [08:55,  2.33s/it, bound:113 nc: 90 ncall:8.7e+04 eff:1.9% logz=-22976.64+/-0.42 dlogz:328.543>0.1]1664it [08:55,  1.76s/it, bound:113 nc: 53 ncall:8.7e+04 eff:1.9% logz=-22976.08+/-0.43 dlogz:327.773>0.1]1665it [08:58,  1.91s/it, bound:113 nc:296 ncall:8.8e+04 eff:1.9% logz=-22975.61+/-0.43 dlogz:327.208>0.1]1666it [08:58,  1.49s/it, bound:113 nc: 69 ncall:8.8e+04 eff:1.9% logz=-22975.18+/-0.44 dlogz:326.726>0.1]1667it [09:12,  5.35s/it, bound:117 nc:1824 ncall:8.9e+04 eff:1.9% logz=-22974.83+/-0.44 dlogz:326.288>0.1]1669it [09:13,  2.93s/it, bound:117 nc: 18 ncall:8.9e+04 eff:1.9% logz=-22974.05+/-0.44 dlogz:325.514>0.1] 1671it [09:13,  1.79s/it, bound:117 nc: 10 ncall:8.9e+04 eff:1.9% logz=-22972.87+/-0.44 dlogz:324.696>0.1]1674it [09:13,  1.01it/s, bound:117 nc:  4 ncall:8.9e+04 eff:1.9% logz=-22970.19+/-0.45 dlogz:322.260>0.1]1676it [09:13,  1.42it/s, bound:117 nc:  9 ncall:8.9e+04 eff:1.9% logz=-22959.64+/-0.46 dlogz:313.741>0.1]1678it [09:13,  1.91it/s, bound:117 nc: 12 ncall:9.0e+04 eff:1.9% logz=-22957.01+/-0.45 dlogz:309.356>0.1]1680it [09:14,  2.51it/s, bound:117 nc: 18 ncall:9.0e+04 eff:1.9% logz=-22946.76+/-0.47 dlogz:306.222>0.1]1682it [09:14,  3.31it/s, bound:117 nc:  7 ncall:9.0e+04 eff:1.9% logz=-22942.99+/-0.46 dlogz:295.637>0.1]1684it [09:14,  4.02it/s, bound:117 nc:  6 ncall:9.0e+04 eff:1.9% logz=-22932.76+/-0.47 dlogz:291.754>0.1]1686it [09:14,  4.86it/s, bound:117 nc: 25 ncall:9.0e+04 eff:1.9% logz=-22923.99+/-0.47 dlogz:280.726>0.1]1688it [09:14,  5.64it/s, bound:117 nc: 18 ncall:9.0e+04 eff:1.9% logz=-22920.46+/-0.46 dlogz:272.849>0.1]1689it [09:15,  4.19it/s, bound:117 nc: 70 ncall:9.0e+04 eff:1.9% logz=-22914.15+/-0.47 dlogz:271.345>0.1]1691it [09:15,  4.88it/s, bound:117 nc: 35 ncall:9.0e+04 eff:1.9% logz=-22908.72+/-0.46 dlogz:262.003>0.1]1693it [09:15,  6.08it/s, bound:117 nc: 13 ncall:9.0e+04 eff:1.9% logz=-22906.37+/-0.45 dlogz:258.016>0.1]1695it [09:16,  6.46it/s, bound:117 nc: 24 ncall:9.0e+04 eff:1.9% logz=-22903.37+/-0.46 dlogz:255.925>0.1]1696it [09:16,  6.70it/s, bound:117 nc: 18 ncall:9.0e+04 eff:1.9% logz=-22897.35+/-0.47 dlogz:254.186>0.1]1697it [09:16,  6.14it/s, bound:117 nc: 26 ncall:9.0e+04 eff:1.9% logz=-22893.80+/-0.47 dlogz:248.162>0.1]1698it [09:16,  5.95it/s, bound:117 nc: 24 ncall:9.0e+04 eff:1.9% logz=-22885.71+/-0.47 dlogz:244.599>0.1]1700it [09:16,  6.88it/s, bound:117 nc: 21 ncall:9.0e+04 eff:1.9% logz=-22882.92+/-0.46 dlogz:234.695>0.1]1702it [09:17,  6.25it/s, bound:117 nc: 46 ncall:9.0e+04 eff:1.9% logz=-22880.07+/-0.46 dlogz:232.858>0.1]1703it [09:17,  5.85it/s, bound:117 nc: 28 ncall:9.0e+04 eff:1.9% logz=-22879.06+/-0.46 dlogz:230.815>0.1]1704it [09:17,  6.09it/s, bound:118 nc:  3 ncall:9.0e+04 eff:1.9% logz=-22877.94+/-0.46 dlogz:229.804>0.1]1712it [09:17, 17.59it/s, bound:118 nc:  4 ncall:9.0e+04 eff:1.9% logz=-22856.98+/-0.46 dlogz:209.051>0.1]1716it [09:17, 19.86it/s, bound:118 nc: 12 ncall:9.0e+04 eff:1.9% logz=-22850.05+/-0.46 dlogz:201.592>0.1]1726it [09:17, 34.04it/s, bound:118 nc:  3 ncall:9.0e+04 eff:1.9% logz=-22838.65+/-0.46 dlogz:190.750>0.1]1735it [09:18, 43.80it/s, bound:118 nc:  2 ncall:9.0e+04 eff:1.9% logz=-22823.81+/-0.46 dlogz:176.091>0.1]1742it [09:18, 47.34it/s, bound:118 nc:  2 ncall:9.0e+04 eff:1.9% logz=-22817.12+/-0.46 dlogz:168.576>0.1]1749it [09:18, 49.70it/s, bound:118 nc:  2 ncall:9.0e+04 eff:1.9% logz=-22807.78+/-0.45 dlogz:158.495>0.1]1756it [09:18, 48.78it/s, bound:118 nc:  6 ncall:9.0e+04 eff:1.9% logz=-22798.78+/-0.46 dlogz:149.607>0.1]1762it [09:18, 43.09it/s, bound:118 nc:  2 ncall:9.0e+04 eff:2.0% logz=-22789.34+/-0.46 dlogz:140.164>0.1]1768it [09:18, 44.43it/s, bound:118 nc:  4 ncall:9.0e+04 eff:2.0% logz=-22780.78+/-0.45 dlogz:131.346>0.1]1774it [09:18, 45.22it/s, bound:118 nc:  2 ncall:9.0e+04 eff:2.0% logz=-22775.96+/-0.46 dlogz:126.803>0.1]1781it [09:19, 45.01it/s, bound:118 nc:  8 ncall:9.0e+04 eff:2.0% logz=-22768.32+/-0.46 dlogz:118.854>0.1]1786it [09:19, 36.22it/s, bound:118 nc:  2 ncall:9.0e+04 eff:2.0% logz=-22760.23+/-0.46 dlogz:111.062>0.1]1790it [09:19, 33.64it/s, bound:118 nc:  2 ncall:9.0e+04 eff:2.0% logz=-22755.96+/-0.46 dlogz:106.343>0.1]1794it [09:19, 34.96it/s, bound:118 nc:  4 ncall:9.0e+04 eff:2.0% logz=-22753.99+/-0.46 dlogz:104.422>0.1]1798it [09:19, 34.38it/s, bound:118 nc:  7 ncall:9.0e+04 eff:2.0% logz=-22751.22+/-0.46 dlogz:101.677>0.1]1802it [09:19, 23.21it/s, bound:118 nc: 19 ncall:9.0e+04 eff:2.0% logz=-22747.33+/-0.46 dlogz:97.604>0.1] 1806it [09:20, 24.00it/s, bound:118 nc: 10 ncall:9.0e+04 eff:2.0% logz=-22745.23+/-0.46 dlogz:95.491>0.1]1809it [09:20, 21.58it/s, bound:118 nc:  5 ncall:9.0e+04 eff:2.0% logz=-22743.45+/-0.46 dlogz:93.951>0.1]1814it [09:20, 25.90it/s, bound:118 nc:  9 ncall:9.0e+04 eff:2.0% logz=-22737.98+/-0.46 dlogz:88.289>0.1]1817it [09:20, 25.71it/s, bound:118 nc:  1 ncall:9.0e+04 eff:2.0% logz=-22736.68+/-0.46 dlogz:86.746>0.1]1820it [09:20, 20.16it/s, bound:118 nc: 14 ncall:9.0e+04 eff:2.0% logz=-22735.43+/-0.46 dlogz:85.328>0.1]1823it [09:20, 19.78it/s, bound:118 nc: 10 ncall:9.0e+04 eff:2.0% logz=-22734.05+/-0.46 dlogz:84.120>0.1]1826it [09:21, 20.90it/s, bound:118 nc:  3 ncall:9.0e+04 eff:2.0% logz=-22733.03+/-0.46 dlogz:82.894>0.1]1829it [09:21, 21.89it/s, bound:118 nc:  2 ncall:9.0e+04 eff:2.0% logz=-22731.75+/-0.46 dlogz:81.569>0.1]1834it [09:21, 22.61it/s, bound:118 nc: 19 ncall:9.0e+04 eff:2.0% logz=-22729.49+/-0.46 dlogz:79.689>0.1]1839it [09:21, 24.11it/s, bound:118 nc: 10 ncall:9.1e+04 eff:2.0% logz=-22727.29+/-0.46 dlogz:76.977>0.1]1842it [09:21, 24.06it/s, bound:118 nc:  3 ncall:9.1e+04 eff:2.0% logz=-22726.21+/-0.46 dlogz:75.990>0.1]1845it [09:21, 22.60it/s, bound:118 nc:  3 ncall:9.1e+04 eff:2.0% logz=-22725.02+/-0.46 dlogz:74.867>0.1]1850it [09:22, 25.49it/s, bound:118 nc: 13 ncall:9.1e+04 eff:2.0% logz=-22721.80+/-0.46 dlogz:71.497>0.1]1853it [09:22, 18.06it/s, bound:119 nc:  4 ncall:9.1e+04 eff:2.0% logz=-22720.92+/-0.46 dlogz:70.492>0.1]1862it [09:22, 29.50it/s, bound:119 nc:  3 ncall:9.1e+04 eff:2.1% logz=-22716.50+/-0.46 dlogz:66.040>0.1]1866it [09:22, 30.70it/s, bound:119 nc:  4 ncall:9.1e+04 eff:2.1% logz=-22714.91+/-0.46 dlogz:64.693>0.1]1874it [09:22, 38.67it/s, bound:119 nc:  2 ncall:9.1e+04 eff:2.1% logz=-22707.66+/-0.46 dlogz:57.049>0.1]1884it [09:22, 43.82it/s, bound:119 nc: 10 ncall:9.1e+04 eff:2.1% logz=-22703.38+/-0.46 dlogz:53.476>0.1]1890it [09:23, 45.12it/s, bound:119 nc:  1 ncall:9.1e+04 eff:2.1% logz=-22700.52+/-0.46 dlogz:50.612>0.1]1899it [09:23, 52.93it/s, bound:119 nc:  4 ncall:9.1e+04 eff:2.1% logz=-22696.20+/-0.47 dlogz:46.609>0.1]1905it [09:23, 51.23it/s, bound:119 nc:  2 ncall:9.1e+04 eff:2.1% logz=-22693.72+/-0.46 dlogz:43.579>0.1]1911it [09:23, 50.69it/s, bound:119 nc:  5 ncall:9.1e+04 eff:2.1% logz=-22691.69+/-0.46 dlogz:41.637>0.1]1917it [09:23, 49.48it/s, bound:119 nc:  1 ncall:9.1e+04 eff:2.1% logz=-22689.68+/-0.46 dlogz:39.463>0.1]1923it [09:23, 49.89it/s, bound:119 nc:  3 ncall:9.1e+04 eff:2.1% logz=-22687.83+/-0.46 dlogz:37.587>0.1]1929it [09:23, 46.63it/s, bound:119 nc:  5 ncall:9.1e+04 eff:2.1% logz=-22685.97+/-0.46 dlogz:35.543>0.1]1934it [09:23, 39.27it/s, bound:119 nc: 10 ncall:9.1e+04 eff:2.1% logz=-22684.04+/-0.47 dlogz:33.638>0.1]1939it [09:24, 36.90it/s, bound:119 nc:  7 ncall:9.1e+04 eff:2.1% logz=-22682.66+/-0.46 dlogz:32.167>0.1]1944it [09:24, 35.49it/s, bound:119 nc: 10 ncall:9.1e+04 eff:2.1% logz=-22680.99+/-0.47 dlogz:30.602>0.1]1948it [09:24, 35.11it/s, bound:119 nc:  4 ncall:9.1e+04 eff:2.1% logz=-22678.76+/-0.47 dlogz:28.362>0.1]1952it [09:24, 25.50it/s, bound:119 nc:  2 ncall:9.1e+04 eff:2.1% logz=-22677.54+/-0.47 dlogz:27.075>0.1]1958it [09:24, 27.54it/s, bound:119 nc: 12 ncall:9.1e+04 eff:2.2% logz=-22676.02+/-0.47 dlogz:25.520>0.1]1962it [09:25, 26.04it/s, bound:119 nc:  1 ncall:9.1e+04 eff:2.2% logz=-22675.04+/-0.46 dlogz:24.429>0.1]1965it [09:25, 24.30it/s, bound:119 nc:  6 ncall:9.1e+04 eff:2.2% logz=-22674.52+/-0.46 dlogz:23.850>0.1]1969it [09:25, 26.43it/s, bound:119 nc:  3 ncall:9.1e+04 eff:2.2% logz=-22673.53+/-0.46 dlogz:22.882>0.1]1972it [09:25, 20.82it/s, bound:119 nc: 15 ncall:9.1e+04 eff:2.2% logz=-22672.97+/-0.46 dlogz:22.215>0.1]1976it [09:25, 22.24it/s, bound:119 nc:  5 ncall:9.1e+04 eff:2.2% logz=-22672.42+/-0.46 dlogz:21.596>0.1]1981it [09:25, 23.75it/s, bound:119 nc: 13 ncall:9.1e+04 eff:2.2% logz=-22671.60+/-0.46 dlogz:20.761>0.1]1984it [09:26, 22.57it/s, bound:119 nc: 17 ncall:9.1e+04 eff:2.2% logz=-22671.10+/-0.46 dlogz:20.208>0.1]1987it [09:26, 21.92it/s, bound:119 nc:  5 ncall:9.1e+04 eff:2.2% logz=-22670.69+/-0.46 dlogz:19.755>0.1]1990it [09:26, 22.58it/s, bound:119 nc:  5 ncall:9.1e+04 eff:2.2% logz=-22670.35+/-0.46 dlogz:19.349>0.1]1993it [09:26, 17.84it/s, bound:119 nc: 15 ncall:9.1e+04 eff:2.2% logz=-22669.99+/-0.46 dlogz:18.985>0.1]1995it [09:26, 15.00it/s, bound:119 nc: 21 ncall:9.1e+04 eff:2.2% logz=-22669.72+/-0.46 dlogz:18.697>0.1]1997it [09:27, 13.74it/s, bound:119 nc: 15 ncall:9.1e+04 eff:2.2% logz=-22669.42+/-0.46 dlogz:18.410>0.1]1999it [09:27, 14.03it/s, bound:120 nc:  1 ncall:9.1e+04 eff:2.2% logz=-22669.09+/-0.46 dlogz:18.065>0.1]2008it [09:27, 27.85it/s, bound:120 nc:  1 ncall:9.1e+04 eff:2.2% logz=-22667.62+/-0.46 dlogz:16.483>0.1]2019it [09:27, 43.66it/s, bound:120 nc:  4 ncall:9.1e+04 eff:2.2% logz=-22666.02+/-0.47 dlogz:14.866>0.1]2029it [09:27, 53.45it/s, bound:120 nc:  4 ncall:9.1e+04 eff:2.2% logz=-22664.67+/-0.47 dlogz:13.455>0.1]2036it [09:27, 53.53it/s, bound:120 nc:  3 ncall:9.1e+04 eff:2.2% logz=-22664.06+/-0.46 dlogz:12.746>0.1]2045it [09:27, 59.00it/s, bound:120 nc:  2 ncall:9.1e+04 eff:2.2% logz=-22663.37+/-0.46 dlogz:12.002>0.1]2056it [09:27, 67.47it/s, bound:120 nc:  1 ncall:9.1e+04 eff:2.3% logz=-22662.25+/-0.46 dlogz:10.750>0.1]2064it [09:28, 66.74it/s, bound:120 nc:  1 ncall:9.1e+04 eff:2.3% logz=-22661.62+/-0.46 dlogz:10.017>0.1]2071it [09:28, 63.42it/s, bound:120 nc:  2 ncall:9.1e+04 eff:2.3% logz=-22661.12+/-0.46 dlogz:9.461>0.1] 2079it [09:28, 65.04it/s, bound:120 nc:  2 ncall:9.1e+04 eff:2.3% logz=-22660.57+/-0.46 dlogz:8.818>0.1]2086it [09:28, 47.94it/s, bound:120 nc:  8 ncall:9.1e+04 eff:2.3% logz=-22660.12+/-0.46 dlogz:8.295>0.1]2092it [09:28, 43.02it/s, bound:120 nc:  1 ncall:9.1e+04 eff:2.3% logz=-22659.72+/-0.46 dlogz:7.839>0.1]2097it [09:28, 37.97it/s, bound:120 nc:  6 ncall:9.1e+04 eff:2.3% logz=-22659.45+/-0.46 dlogz:7.506>0.1]2102it [09:28, 38.52it/s, bound:120 nc:  2 ncall:9.1e+04 eff:2.3% logz=-22659.19+/-0.46 dlogz:7.193>0.1]2107it [09:29, 34.66it/s, bound:120 nc:  4 ncall:9.1e+04 eff:2.3% logz=-22658.98+/-0.46 dlogz:6.921>0.1]2111it [09:29, 30.22it/s, bound:120 nc: 12 ncall:9.2e+04 eff:2.3% logz=-22658.80+/-0.46 dlogz:6.714>0.1]2115it [09:29, 29.40it/s, bound:120 nc:  2 ncall:9.2e+04 eff:2.3% logz=-22658.60+/-0.46 dlogz:6.475>0.1]2119it [09:29, 30.38it/s, bound:120 nc:  7 ncall:9.2e+04 eff:2.3% logz=-22658.40+/-0.46 dlogz:6.234>0.1]2123it [09:29, 27.15it/s, bound:120 nc:  9 ncall:9.2e+04 eff:2.3% logz=-22658.20+/-0.46 dlogz:5.996>0.1]2128it [09:29, 27.25it/s, bound:120 nc: 10 ncall:9.2e+04 eff:2.3% logz=-22657.96+/-0.46 dlogz:5.704>0.1]2132it [09:30, 24.59it/s, bound:120 nc: 18 ncall:9.2e+04 eff:2.3% logz=-22657.77+/-0.46 dlogz:5.475>0.1]2135it [09:30, 21.94it/s, bound:120 nc: 12 ncall:9.2e+04 eff:2.3% logz=-22657.61+/-0.46 dlogz:5.297>0.1]2139it [09:30, 24.49it/s, bound:120 nc:  6 ncall:9.2e+04 eff:2.3% logz=-22657.42+/-0.46 dlogz:5.062>0.1]2143it [09:30, 27.65it/s, bound:120 nc:  2 ncall:9.2e+04 eff:2.3% logz=-22657.23+/-0.47 dlogz:4.828>0.1]2147it [09:30, 23.01it/s, bound:120 nc:  3 ncall:9.2e+04 eff:2.3% logz=-22657.03+/-0.47 dlogz:4.596>0.1]2152it [09:30, 27.25it/s, bound:120 nc:  4 ncall:9.2e+04 eff:2.3% logz=-22656.83+/-0.47 dlogz:4.333>0.1]2156it [09:31, 22.80it/s, bound:120 nc:  4 ncall:9.2e+04 eff:2.3% logz=-22656.68+/-0.47 dlogz:4.147>0.1]2159it [09:31, 21.79it/s, bound:120 nc:  3 ncall:9.2e+04 eff:2.4% logz=-22656.57+/-0.47 dlogz:4.009>0.1]2162it [09:31, 20.31it/s, bound:120 nc:  4 ncall:9.2e+04 eff:2.4% logz=-22656.46+/-0.47 dlogz:3.874>0.1]2165it [09:31, 15.59it/s, bound:121 nc:  4 ncall:9.2e+04 eff:2.4% logz=-22656.37+/-0.47 dlogz:3.749>0.1]2175it [09:32, 27.09it/s, bound:121 nc:  6 ncall:9.2e+04 eff:2.4% logz=-22656.09+/-0.46 dlogz:3.379>0.1]2185it [09:32, 38.36it/s, bound:121 nc:  2 ncall:9.2e+04 eff:2.4% logz=-22655.86+/-0.46 dlogz:3.055>0.1]2193it [09:32, 44.69it/s, bound:121 nc:  2 ncall:9.2e+04 eff:2.4% logz=-22655.67+/-0.46 dlogz:2.808>0.1]2204it [09:32, 55.67it/s, bound:121 nc:  2 ncall:9.2e+04 eff:2.4% logz=-22655.44+/-0.46 dlogz:2.483>0.1]2212it [09:32, 61.04it/s, bound:121 nc:  2 ncall:9.2e+04 eff:2.4% logz=-22655.29+/-0.46 dlogz:2.274>0.1]2219it [09:32, 59.56it/s, bound:121 nc:  1 ncall:9.2e+04 eff:2.4% logz=-22655.17+/-0.46 dlogz:2.106>0.1]2227it [09:32, 57.59it/s, bound:121 nc:  5 ncall:9.2e+04 eff:2.4% logz=-22655.05+/-0.46 dlogz:1.931>0.1]2234it [09:32, 49.82it/s, bound:121 nc:  4 ncall:9.2e+04 eff:2.4% logz=-22654.95+/-0.46 dlogz:1.789>0.1]2240it [09:33, 49.49it/s, bound:121 nc:  4 ncall:9.2e+04 eff:2.4% logz=-22654.87+/-0.46 dlogz:1.673>0.1]2246it [09:33, 43.04it/s, bound:121 nc:  5 ncall:9.2e+04 eff:2.4% logz=-22654.80+/-0.46 dlogz:1.563>0.1]2251it [09:33, 41.98it/s, bound:121 nc:  4 ncall:9.2e+04 eff:2.4% logz=-22654.74+/-0.46 dlogz:1.478>0.1]2256it [09:33, 39.60it/s, bound:121 nc: 11 ncall:9.2e+04 eff:2.5% logz=-22654.68+/-0.46 dlogz:1.397>0.1]2261it [09:33, 30.03it/s, bound:121 nc:  7 ncall:9.2e+04 eff:2.5% logz=-22654.63+/-0.46 dlogz:1.321>0.1]2266it [09:33, 32.51it/s, bound:121 nc:  2 ncall:9.2e+04 eff:2.5% logz=-22654.58+/-0.46 dlogz:1.246>0.1]2272it [09:34, 30.60it/s, bound:121 nc: 16 ncall:9.2e+04 eff:2.5% logz=-22654.51+/-0.46 dlogz:1.161>0.1]2276it [09:34, 31.14it/s, bound:121 nc:  4 ncall:9.2e+04 eff:2.5% logz=-22654.48+/-0.46 dlogz:1.108>0.1]2280it [09:34, 30.05it/s, bound:121 nc:  7 ncall:9.2e+04 eff:2.5% logz=-22654.44+/-0.46 dlogz:1.058>0.1]2284it [09:34, 25.59it/s, bound:121 nc:  8 ncall:9.2e+04 eff:2.5% logz=-22654.41+/-0.46 dlogz:1.010>0.1]2287it [09:34, 24.12it/s, bound:121 nc:  3 ncall:9.2e+04 eff:2.5% logz=-22654.38+/-0.46 dlogz:0.975>0.1]2292it [09:35, 23.61it/s, bound:121 nc: 16 ncall:9.2e+04 eff:2.5% logz=-22654.34+/-0.46 dlogz:0.920>0.1]2295it [09:35, 21.46it/s, bound:121 nc:  9 ncall:9.2e+04 eff:2.5% logz=-22654.32+/-0.46 dlogz:0.889>0.1]2299it [09:35, 23.96it/s, bound:121 nc:  1 ncall:9.2e+04 eff:2.5% logz=-22654.29+/-0.46 dlogz:0.848>0.1]2302it [09:35, 24.07it/s, bound:121 nc:  1 ncall:9.2e+04 eff:2.5% logz=-22654.27+/-0.46 dlogz:0.823>0.1]2306it [09:35, 24.90it/s, bound:121 nc:  7 ncall:9.2e+04 eff:2.5% logz=-22654.24+/-0.46 dlogz:0.785>0.1]2309it [09:35, 20.87it/s, bound:121 nc:  6 ncall:9.2e+04 eff:2.5% logz=-22654.22+/-0.46 dlogz:0.758>0.1]2312it [09:35, 21.61it/s, bound:121 nc:  2 ncall:9.2e+04 eff:2.5% logz=-22654.20+/-0.46 dlogz:0.732>0.1]2315it [09:36, 18.11it/s, bound:121 nc: 11 ncall:9.2e+04 eff:2.5% logz=-22654.18+/-0.46 dlogz:0.707>0.1]2318it [09:36, 19.46it/s, bound:121 nc:  5 ncall:9.2e+04 eff:2.5% logz=-22654.16+/-0.46 dlogz:0.683>0.1]2321it [09:36, 19.71it/s, bound:121 nc:  4 ncall:9.2e+04 eff:2.5% logz=-22654.14+/-0.46 dlogz:0.659>0.1]2324it [09:36, 20.46it/s, bound:122 nc:  1 ncall:9.2e+04 eff:2.5% logz=-22654.13+/-0.46 dlogz:0.637>0.1]2333it [09:36, 34.40it/s, bound:122 nc:  1 ncall:9.2e+04 eff:2.5% logz=-22654.08+/-0.46 dlogz:0.575>0.1]2345it [09:36, 51.70it/s, bound:122 nc:  1 ncall:9.2e+04 eff:2.5% logz=-22654.02+/-0.46 dlogz:0.501>0.1]2355it [09:36, 63.02it/s, bound:122 nc:  1 ncall:9.2e+04 eff:2.5% logz=-22653.98+/-0.46 dlogz:0.448>0.1]2365it [09:37, 69.12it/s, bound:122 nc:  3 ncall:9.2e+04 eff:2.6% logz=-22653.95+/-0.46 dlogz:0.401>0.1]2374it [09:37, 70.13it/s, bound:122 nc:  1 ncall:9.2e+04 eff:2.6% logz=-22653.92+/-0.46 dlogz:0.363>0.1]2385it [09:37, 76.25it/s, bound:122 nc:  4 ncall:9.3e+04 eff:2.6% logz=-22653.88+/-0.46 dlogz:0.321>0.1]2393it [09:37, 68.36it/s, bound:122 nc:  1 ncall:9.3e+04 eff:2.6% logz=-22653.86+/-0.46 dlogz:0.294>0.1]2401it [09:37, 66.66it/s, bound:122 nc:  2 ncall:9.3e+04 eff:2.6% logz=-22653.84+/-0.46 dlogz:0.270>0.1]2408it [09:37, 64.41it/s, bound:122 nc:  3 ncall:9.3e+04 eff:2.6% logz=-22653.82+/-0.46 dlogz:0.250>0.1]2415it [09:37, 62.51it/s, bound:122 nc:  1 ncall:9.3e+04 eff:2.6% logz=-22653.81+/-0.46 dlogz:0.232>0.1]2422it [09:38, 49.94it/s, bound:122 nc:  5 ncall:9.3e+04 eff:2.6% logz=-22653.79+/-0.46 dlogz:0.215>0.1]2428it [09:38, 46.33it/s, bound:122 nc:  3 ncall:9.3e+04 eff:2.6% logz=-22653.78+/-0.46 dlogz:0.202>0.1]2437it [09:38, 50.93it/s, bound:122 nc:  6 ncall:9.3e+04 eff:2.6% logz=-22653.77+/-0.46 dlogz:0.183>0.1]2444it [09:38, 51.88it/s, bound:122 nc:  4 ncall:9.3e+04 eff:2.6% logz=-22653.76+/-0.46 dlogz:0.170>0.1]2450it [09:38, 43.22it/s, bound:122 nc:  1 ncall:9.3e+04 eff:2.6% logz=-22653.75+/-0.46 dlogz:0.160>0.1]2455it [09:38, 42.67it/s, bound:122 nc:  2 ncall:9.3e+04 eff:2.6% logz=-22653.74+/-0.46 dlogz:0.151>0.1]2460it [09:39, 33.34it/s, bound:122 nc:  7 ncall:9.3e+04 eff:2.7% logz=-22653.73+/-0.46 dlogz:0.144>0.1]2464it [09:39, 31.42it/s, bound:122 nc:  2 ncall:9.3e+04 eff:2.7% logz=-22653.73+/-0.46 dlogz:0.138>0.1]2468it [09:39, 22.92it/s, bound:122 nc:  2 ncall:9.3e+04 eff:2.7% logz=-22653.72+/-0.46 dlogz:0.132>0.1]2472it [09:39, 22.52it/s, bound:122 nc: 10 ncall:9.3e+04 eff:2.7% logz=-22653.72+/-0.46 dlogz:0.127>0.1]2476it [09:39, 22.46it/s, bound:122 nc: 17 ncall:9.3e+04 eff:2.7% logz=-22653.71+/-0.46 dlogz:0.121>0.1]2479it [09:40, 21.74it/s, bound:122 nc:  5 ncall:9.3e+04 eff:2.7% logz=-22653.71+/-0.46 dlogz:0.118>0.1]2483it [09:40, 24.13it/s, bound:122 nc:  3 ncall:9.3e+04 eff:2.7% logz=-22653.71+/-0.46 dlogz:0.113>0.1]2486it [09:40, 20.48it/s, bound:122 nc:  4 ncall:9.3e+04 eff:2.7% logz=-22653.70+/-0.46 dlogz:0.109>0.1]2490it [09:40, 17.32it/s, bound:122 nc: 32 ncall:9.3e+04 eff:2.7% logz=-22653.70+/-0.46 dlogz:0.105>0.1]2493it [09:40, 18.68it/s, bound:122 nc:  6 ncall:9.3e+04 eff:2.7% logz=-22653.69+/-0.46 dlogz:0.102>0.1]09:13 bilby INFO    : Written checkpoint file ../data/nested_sampling//sbatch_testing_resume.pickle
09:13 bilby INFO    : Starting to close worker pool.
09:13 bilby INFO    : Finished closing worker pool.
2494it [09:41,  1.93it/s, bound:122 nc:  1 ncall:9.3e+04 eff:2.8% logz=-22653.60+/-0.45 dlogz:0.001>0.1]09:13 bilby INFO    : Rejection sampling nested samples to obtain 260 posterior samples
09:13 bilby INFO    : Sampling time: 0:10:26.468152
<frozen importlib._bootstrap>:228: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility. Expected 88 from C header, got 96 from PyObject
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1374: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  posterior[key] = priors[key].peak
/fred/oz022/tkimpson/conda_envs/OzStar/lib/python3.9/site-packages/bilby/core/result.py:1401: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  data_frame['log_likelihood'] = getattr(
09:15 bilby INFO    : Summary of results:
nsamples: 260
ln_noise_evidence:    nan
ln_evidence: -22653.599 +/-  0.539
ln_bayes_factor:    nan +/-  0.539



